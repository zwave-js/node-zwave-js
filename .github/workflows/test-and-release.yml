name: Test and Release

# Run this job on all pushes to master, for pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      # This avoids having duplicate builds in non-forked PRs
      - "master"
    tags:
      # normal versions
      - "v[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

# Cancel previous PR/branch runs when a new commit is pushed
concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x] # This should be LTS

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    - name: Compile TypeScript code
      run: yarn lerna run build

    - name: Run linters
      run: yarn run lint

    - name: Prepare lint auto-fix patch
      if: |
        failure() &&
        github.event_name == 'pull_request'
      id: lint
      run: |
        # Run all lint commands and abort if one has unfixable errors
        yarn run lint:ts --fix
        yarn run lint:wotan --fix
        yarn run lint:configjson -w

        git diff --name-only || true
        if ! git diff --quiet ; then
          echo "has changes"
          git diff > fix.patch
          echo "::set-output name=changed::true"
        else
          echo "unchanged"
          echo "::set-output name=changed::false"
        fi

    - name: Upload Patch
      if: |
        failure() &&
        github.event_name == 'pull_request' &&
        steps.lint.outputs.changed == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: lint-fix
        path: fix.patch

  # ===================

  lint-zwave:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x] # This should be LTS

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    - name: Compile TypeScript code
      run: yarn lerna run build

    - name: Lint config files
      run: yarn run lint:config

    - name: Lint Z-Wave specifics
      run: yarn run lint:zwave

  # ===================
  # Runs unit tests on all supported node versions and OSes
  unit-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    # Compilation is necessary, or the tests won't run
    - name: Compile TypeScript code
      run: yarn run build

    # Test that the generated packages are ok
    - name: Import main entry point
      run: yarn node -e 'require("zwave-js")'

    - name: Run component tests
      run: yarn run test:ci
      env:
        CI: true

  # ===================

  # Generate coverage reports when the unit tests have succeeded
  coverage:
    # Trigger this step only on pushes, because the job often fails for pull requests
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push'

    needs: [unit-tests]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x] # This should be LTS

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    # Compilation is necessary, or the tests won't run
    - name: Compile TypeScript code
      run: yarn run build

    - name: Generate coverage
      run: yarn run coverage:ci
      env:
        CI: true
    - name: Upload to Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  # ===================

  # Deploys the final package to NPM
  deploy:
    # Trigger this step only when a commit on any branch is tagged with a version number
    if: |
      github.actor == 'AlCalzone' &&
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    needs: [lint, lint-zwave, unit-tests]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x] # This should be LTS

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Extract the version and commit body from the tag
      id: extract_release
      # The body may be multiline, therefore we need to escape some characters
      run: |
        VERSION="${{ github.ref }}"
        VERSION=${VERSION##*/v}
        echo "::set-output name=VERSION::$VERSION"
        BODY=$(git show -s --format=%b)
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        echo "::set-output name=BODY::$BODY"
        if [[ $VERSION == *"-"* ]] ; then
          echo "::set-output name=TAG::--dist-tag next"
        fi

    - name: Install dependencies
      run: yarn install --immutable

    - name: Create a clean build
      run: yarn run build

    - name: Publish packages to npm
      env:
        TAG: ${{ steps.extract_release.outputs.TAG }}
      run: |
        npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
        npm whoami
        yarn lerna publish from-package --yes $TAG

    - name: Create Github Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.extract_release.outputs.VERSION }}
        draft: false
        # Prerelease versions create prereleases on Github
        prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
        body: ${{ steps.extract_release.outputs.BODY }}

    - name: Notify Sentry.io about the release
      run: |
        npm i -g @sentry/cli
        export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
        export SENTRY_URL=https://sentry.iobroker.net
        export SENTRY_ORG=iobroker
        export SENTRY_PROJECT=zwave-js
        export SENTRY_VERSION=zwave-js@${{ steps.extract_release.outputs.VERSION }}
        sentry-cli releases new $SENTRY_VERSION
        # Commits disabled until the Github integration can be enabled
        sentry-cli releases set-commits $SENTRY_VERSION --auto
        sentry-cli releases files $SENTRY_VERSION upload-sourcemaps ./packages/*/build
        sentry-cli releases finalize $SENTRY_VERSION
