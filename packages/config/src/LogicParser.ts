// THIS FILE WAS AUTO GENERATED
/* eslint-disable */
// @ts-nocheck

/* eslint-disable */

const peggyParser: { parse: any; SyntaxError: any; DefaultTracer?: any } = // Generated by Peggy 3.0.2.
	//
	// https://peggyjs.org/
	// @ts-ignore
	(function() {
		// @ts-ignore
		"use strict";

		// @ts-ignore
		function peg$subclass(child, parent) {
			// @ts-ignore
			function C() {
				this.constructor = child;
			}
			// @ts-ignore
			C.prototype = parent.prototype;
			// @ts-ignore
			child.prototype = new C();
		}

		// @ts-ignore
		function peg$SyntaxError(message, expected, found, location) {
			// @ts-ignore
			var self = Error.call(this, message);
			// istanbul ignore next Check is a necessary evil to support older environments
			// @ts-ignore
			if (Object.setPrototypeOf) {
				// @ts-ignore
				Object.setPrototypeOf(self, peg$SyntaxError.prototype);
			}
			// @ts-ignore
			self.expected = expected;
			// @ts-ignore
			self.found = found;
			// @ts-ignore
			self.location = location;
			// @ts-ignore
			self.name = "SyntaxError";
			// @ts-ignore
			return self;
		}

		// @ts-ignore
		peg$subclass(peg$SyntaxError, Error);

		// @ts-ignore
		function peg$padEnd(str, targetLength, padString) {
			// @ts-ignore
			padString = padString || " ";
			// @ts-ignore
			if (str.length > targetLength) return str;
			// @ts-ignore
			targetLength -= str.length;
			// @ts-ignore
			padString += padString.repeat(targetLength);
			// @ts-ignore
			return str + padString.slice(0, targetLength);
		}

		// @ts-ignore
		peg$SyntaxError.prototype.format = function(sources) {
			// @ts-ignore
			var str = "Error: " + this.message;
			// @ts-ignore
			if (this.location) {
				// @ts-ignore
				var src = null;
				// @ts-ignore
				var k;
				// @ts-ignore
				for (k = 0; k < sources.length; k++) {
					// @ts-ignore
					if (sources[k].source === this.location.source) {
						// @ts-ignore
						src = sources[k].text.split(/\r\n|\n|\r/g);
						// @ts-ignore
						break;
					}
				}
				// @ts-ignore
				var s = this.location.start;
				// @ts-ignore
				var offset_s =
					(this.location.source
							&& (typeof this.location.source.offset
								=== "function"))
						// @ts-ignore
						? this.location.source.offset(s)
						// @ts-ignore
						: s;
				// @ts-ignore
				var loc = this.location.source
					+ ":"
					+ offset_s.line
					+ ":"
					+ offset_s.column;
				// @ts-ignore
				if (src) {
					// @ts-ignore
					var e = this.location.end;
					// @ts-ignore
					var filler = peg$padEnd(
						"",
						offset_s.line.toString().length,
						" ",
					);
					// @ts-ignore
					var line = src[s.line - 1];
					// @ts-ignore
					var last = s.line === e.line ? e.column : line.length + 1;
					// @ts-ignore
					var hatLen = (last - s.column) || 1;
					// @ts-ignore
					str += "\n --> " + loc + "\n" // @ts-ignore
					+ filler + " |\n" // @ts-ignore
					+ offset_s.line + " | " + line + "\n" // @ts-ignore
					+ filler + " | " + peg$padEnd("", s.column - 1, " ") // @ts-ignore
					+ peg$padEnd("", hatLen, "^");
					// @ts-ignore
				} else {
					// @ts-ignore
					str += "\n at " + loc;
				}
			}
			// @ts-ignore
			return str;
		};

		// @ts-ignore
		peg$SyntaxError.buildMessage = function(expected, found) {
			// @ts-ignore
			var DESCRIBE_EXPECTATION_FNS = {
				// @ts-ignore
				literal: function(expectation) {
					// @ts-ignore
					return "\"" + literalEscape(expectation.text) + "\"";
				},

				// @ts-ignore
				class: function(expectation) {
					// @ts-ignore
					var escapedParts = expectation.parts.map(function(part) {
						// @ts-ignore
						return Array.isArray(part)
							// @ts-ignore
							? classEscape(part[0]) + "-" + classEscape(part[1])
							// @ts-ignore
							: classEscape(part);
					});

					// @ts-ignore
					return "["
						+ (expectation.inverted ? "^" : "")
						+ escapedParts.join("")
						+ "]";
				},

				// @ts-ignore
				any: function() {
					// @ts-ignore
					return "any character";
				},

				// @ts-ignore
				end: function() {
					// @ts-ignore
					return "end of input";
				},

				// @ts-ignore
				other: function(expectation) {
					// @ts-ignore
					return expectation.description;
				},
			};

			// @ts-ignore
			function hex(ch) {
				// @ts-ignore
				return ch.charCodeAt(0).toString(16).toUpperCase();
			}

			// @ts-ignore
			function literalEscape(s) {
				// @ts-ignore
				return s
					// @ts-ignore
					.replace(/\\/g, "\\\\")
					// @ts-ignore
					.replace(/"/g, "\\\"")
					// @ts-ignore
					.replace(/\0/g, "\\0")
					// @ts-ignore
					.replace(/\t/g, "\\t")
					// @ts-ignore
					.replace(/\n/g, "\\n")
					// @ts-ignore
					.replace(/\r/g, "\\r")
					// @ts-ignore
					.replace(/[\x00-\x0F]/g, function(ch) {
						return "\\x0" + hex(ch);
					})
					// @ts-ignore
					.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
						return "\\x" + hex(ch);
					});
			}

			// @ts-ignore
			function classEscape(s) {
				// @ts-ignore
				return s
					// @ts-ignore
					.replace(/\\/g, "\\\\")
					// @ts-ignore
					.replace(/\]/g, "\\]")
					// @ts-ignore
					.replace(/\^/g, "\\^")
					// @ts-ignore
					.replace(/-/g, "\\-")
					// @ts-ignore
					.replace(/\0/g, "\\0")
					// @ts-ignore
					.replace(/\t/g, "\\t")
					// @ts-ignore
					.replace(/\n/g, "\\n")
					// @ts-ignore
					.replace(/\r/g, "\\r")
					// @ts-ignore
					.replace(/[\x00-\x0F]/g, function(ch) {
						return "\\x0" + hex(ch);
					})
					// @ts-ignore
					.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
						return "\\x" + hex(ch);
					});
			}

			// @ts-ignore
			function describeExpectation(expectation) {
				// @ts-ignore
				return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
			}

			// @ts-ignore
			function describeExpected(expected) {
				// @ts-ignore
				var descriptions = expected.map(describeExpectation);
				// @ts-ignore
				var i, j;

				// @ts-ignore
				descriptions.sort();

				// @ts-ignore
				if (descriptions.length > 0) {
					// @ts-ignore
					for (i = 1, j = 1; i < descriptions.length; i++) {
						// @ts-ignore
						if (descriptions[i - 1] !== descriptions[i]) {
							// @ts-ignore
							descriptions[j] = descriptions[i];
							// @ts-ignore
							j++;
						}
					}
					// @ts-ignore
					descriptions.length = j;
				}

				// @ts-ignore
				switch (descriptions.length) {
					// @ts-ignore
					case 1:
						// @ts-ignore
						return descriptions[0];

					// @ts-ignore
					case 2:
						// @ts-ignore
						return descriptions[0] + " or " + descriptions[1];

					// @ts-ignore
					default:
						// @ts-ignore
						return descriptions.slice(0, -1).join(", ")
							// @ts-ignore
							+ ", or "
							// @ts-ignore
							+ descriptions[descriptions.length - 1];
				}
			}

			// @ts-ignore
			function describeFound(found) {
				// @ts-ignore
				return found
					? "\"" + literalEscape(found) + "\""
					: "end of input";
			}

			// @ts-ignore
			return "Expected "
				+ describeExpected(expected)
				+ " but "
				+ describeFound(found)
				+ " found.";
		};

		// @ts-ignore
		function peg$parse(input, options) {
			// @ts-ignore
			options = options !== undefined ? options : {};

			// @ts-ignore
			var peg$FAILED = {};
			// @ts-ignore
			var peg$source = options.grammarSource;

			// @ts-ignore
			var peg$startRuleFunctions = { start: peg$parsestart };
			// @ts-ignore
			var peg$startRuleFunction = peg$parsestart;

			// @ts-ignore
			var peg$c0 = "(";
			var peg$c1 = ")";
			var peg$c2 = "||";
			var peg$c3 = "&&";
			var peg$c4 = ">=";
			var peg$c5 = ">";
			var peg$c6 = "<=";
			var peg$c7 = "<";
			var peg$c8 = "===";
			var peg$c9 = "-";
			var peg$c10 = "0x";
			var peg$c11 = ".";
			var peg$c12 = "\"";
			var peg$c13 = "'";

			var peg$r0 = /^[a-zA-Z]/;
			var peg$r1 = /^[a-zA-Z0-9]/;
			var peg$r2 = /^[0-9]/;
			var peg$r3 = /^[0-9a-f]/i;
			var peg$r4 = /^[^"]/;
			var peg$r5 = /^[^']/;
			var peg$r6 = /^[ \t\n\r]/;

			var peg$e0 = peg$otherExpectation("grouped expression");
			var peg$e1 = peg$literalExpectation("(", false);
			var peg$e2 = peg$literalExpectation(")", false);
			var peg$e3 = peg$otherExpectation("logical OR");
			var peg$e4 = peg$literalExpectation("||", false);
			var peg$e5 = peg$otherExpectation("logical AND");
			var peg$e6 = peg$literalExpectation("&&", false);
			var peg$e7 = peg$otherExpectation("numeric comparison");
			var peg$e8 = peg$literalExpectation(">=", false);
			var peg$e9 = peg$literalExpectation(">", false);
			var peg$e10 = peg$literalExpectation("<=", false);
			var peg$e11 = peg$literalExpectation("<", false);
			var peg$e12 = peg$literalExpectation("===", false);
			var peg$e13 = peg$otherExpectation("version comparison");
			var peg$e14 = peg$otherExpectation("variable");
			var peg$e15 = peg$classExpectation(
				[["a", "z"], ["A", "Z"]],
				false,
				false,
			);
			var peg$e16 = peg$classExpectation(
				[["a", "z"], ["A", "Z"], ["0", "9"]],
				false,
				false,
			);
			var peg$e17 = peg$otherExpectation("number");
			var peg$e18 = peg$literalExpectation("-", false);
			var peg$e19 = peg$classExpectation([["0", "9"]], false, false);
			var peg$e20 = peg$otherExpectation("hex number");
			var peg$e21 = peg$literalExpectation("0x", false);
			var peg$e22 = peg$classExpectation(
				[["0", "9"], ["a", "f"]],
				false,
				true,
			);
			var peg$e23 = peg$otherExpectation("version string");
			var peg$e24 = peg$literalExpectation(".", false);
			var peg$e25 = peg$otherExpectation("string");
			var peg$e26 = peg$literalExpectation("\"", false);
			var peg$e27 = peg$classExpectation(["\""], true, false);
			var peg$e28 = peg$literalExpectation("'", false);
			var peg$e29 = peg$classExpectation(["'"], true, false);
			var peg$e30 = peg$otherExpectation("whitespace");
			var peg$e31 = peg$classExpectation(
				[" ", "\t", "\n", "\r"],
				false,
				false,
			);
			// @ts-ignore

			var peg$f0 = function(group) { // @ts-ignore
				return group;
			}; // @ts-ignore

			var peg$f1 = function(head, tails) {
				// @ts-ignore
				return { or: [head, ...tails] };
			}; // @ts-ignore

			var peg$f2 = function(tail) { // @ts-ignore
				return tail;
			}; // @ts-ignore

			var peg$f3 = function(head, tails) {
				// @ts-ignore
				return { and: [head, ...tails] };
			}; // @ts-ignore

			var peg$f4 = function(tail) { // @ts-ignore
				return tail;
			}; // @ts-ignore

			var peg$f5 = function(head, expr, tail) {
				// @ts-ignore
				return { [expr]: [head, tail] };
			}; // @ts-ignore

			var peg$f6 = function(head, expr, tail) {
				// @ts-ignore
				return { ["ver " + expr]: [head, tail] };
			}; // @ts-ignore

			var peg$f7 = function(variable) { // @ts-ignore
				return { var: variable[1].join("") };
			}; // @ts-ignore

			var peg$f8 = function() { // @ts-ignore
				return parseInt(text(), 10);
			}; // @ts-ignore

			var peg$f9 = function() { // @ts-ignore
				return parseInt(text(), 16);
			}; // @ts-ignore

			var peg$f10 = function(version) { // @ts-ignore
				return text();
			}; // @ts-ignore

			var peg$f11 = function() { // @ts-ignore
				return text();
			}; // @ts-ignore

			var peg$f12 = function() { // @ts-ignore
				return text();
			};
			// @ts-ignore
			var peg$currPos = 0;
			// @ts-ignore
			var peg$savedPos = 0;
			// @ts-ignore
			var peg$posDetailsCache = [{ line: 1, column: 1 }];
			// @ts-ignore
			var peg$maxFailPos = 0;
			// @ts-ignore
			var peg$maxFailExpected = [];
			// @ts-ignore
			var peg$silentFails = 0;

			// @ts-ignore
			var peg$result;

			// @ts-ignore
			if ("startRule" in options) {
				// @ts-ignore
				if (!(options.startRule in peg$startRuleFunctions)) {
					// @ts-ignore
					throw new Error(
						"Can't start parsing from rule \""
							+ options.startRule
							+ "\".",
					);
				}

				// @ts-ignore
				peg$startRuleFunction =
					peg$startRuleFunctions[options.startRule];
			}

			// @ts-ignore
			function text() {
				// @ts-ignore
				return input.substring(peg$savedPos, peg$currPos);
			}

			// @ts-ignore
			function offset() {
				// @ts-ignore
				return peg$savedPos;
			}

			// @ts-ignore
			function range() {
				// @ts-ignore
				return {
					// @ts-ignore
					source: peg$source,
					// @ts-ignore
					start: peg$savedPos,
					// @ts-ignore
					end: peg$currPos,
				};
			}

			// @ts-ignore
			function location() {
				// @ts-ignore
				return peg$computeLocation(peg$savedPos, peg$currPos);
			}

			// @ts-ignore
			function expected(description, location) {
				// @ts-ignore
				location = location !== undefined
					// @ts-ignore
					? location
					// @ts-ignore
					: peg$computeLocation(peg$savedPos, peg$currPos);

				// @ts-ignore
				throw peg$buildStructuredError(
					// @ts-ignore
					[peg$otherExpectation(description)],
					// @ts-ignore
					input.substring(peg$savedPos, peg$currPos),
					// @ts-ignore
					location,
				);
			}

			// @ts-ignore
			function error(message, location) {
				// @ts-ignore
				location = location !== undefined
					// @ts-ignore
					? location
					// @ts-ignore
					: peg$computeLocation(peg$savedPos, peg$currPos);

				// @ts-ignore
				throw peg$buildSimpleError(message, location);
			}

			// @ts-ignore
			function peg$literalExpectation(text, ignoreCase) {
				// @ts-ignore
				return { type: "literal", text: text, ignoreCase: ignoreCase };
			}

			// @ts-ignore
			function peg$classExpectation(parts, inverted, ignoreCase) {
				// @ts-ignore
				return {
					type: "class",
					parts: parts,
					inverted: inverted,
					ignoreCase: ignoreCase,
				};
			}

			// @ts-ignore
			function peg$anyExpectation() {
				// @ts-ignore
				return { type: "any" };
			}

			// @ts-ignore
			function peg$endExpectation() {
				// @ts-ignore
				return { type: "end" };
			}

			// @ts-ignore
			function peg$otherExpectation(description) {
				// @ts-ignore
				return { type: "other", description: description };
			}

			// @ts-ignore
			function peg$computePosDetails(pos) {
				// @ts-ignore
				var details = peg$posDetailsCache[pos];
				// @ts-ignore
				var p;

				// @ts-ignore
				if (details) {
					// @ts-ignore
					return details;
					// @ts-ignore
				} else {
					// @ts-ignore
					p = pos - 1;
					// @ts-ignore
					while (!peg$posDetailsCache[p]) {
						// @ts-ignore
						p--;
					}

					// @ts-ignore
					details = peg$posDetailsCache[p];
					// @ts-ignore
					details = {
						// @ts-ignore
						line: details.line,
						// @ts-ignore
						column: details.column,
					};

					// @ts-ignore
					while (p < pos) {
						// @ts-ignore
						if (input.charCodeAt(p) === 10) {
							// @ts-ignore
							details.line++;
							// @ts-ignore
							details.column = 1;
							// @ts-ignore
						} else {
							// @ts-ignore
							details.column++;
						}

						// @ts-ignore
						p++;
					}

					// @ts-ignore
					peg$posDetailsCache[pos] = details;

					// @ts-ignore
					return details;
				}
			}

			// @ts-ignore
			function peg$computeLocation(startPos, endPos, offset) {
				// @ts-ignore
				var startPosDetails = peg$computePosDetails(startPos);
				// @ts-ignore
				var endPosDetails = peg$computePosDetails(endPos);

				// @ts-ignore
				var res = {
					// @ts-ignore
					source: peg$source,
					// @ts-ignore
					start: {
						// @ts-ignore
						offset: startPos,
						// @ts-ignore
						line: startPosDetails.line,
						// @ts-ignore
						column: startPosDetails.column,
					},
					// @ts-ignore
					end: {
						// @ts-ignore
						offset: endPos,
						// @ts-ignore
						line: endPosDetails.line,
						// @ts-ignore
						column: endPosDetails.column,
					},
				};
				// @ts-ignore
				if (
					offset
					&& peg$source
					&& (typeof peg$source.offset === "function")
				) {
					// @ts-ignore
					res.start = peg$source.offset(res.start);
					// @ts-ignore
					res.end = peg$source.offset(res.end);
				}
				// @ts-ignore
				return res;
			}

			// @ts-ignore
			function peg$fail(expected) {
				// @ts-ignore
				if (peg$currPos < peg$maxFailPos) return;

				// @ts-ignore
				if (peg$currPos > peg$maxFailPos) {
					// @ts-ignore
					peg$maxFailPos = peg$currPos;
					// @ts-ignore
					peg$maxFailExpected = [];
				}

				// @ts-ignore
				peg$maxFailExpected.push(expected);
			}

			// @ts-ignore
			function peg$buildSimpleError(message, location) {
				// @ts-ignore
				return new peg$SyntaxError(message, null, null, location);
			}

			// @ts-ignore
			function peg$buildStructuredError(expected, found, location) {
				// @ts-ignore
				return new peg$SyntaxError(
					// @ts-ignore
					peg$SyntaxError.buildMessage(expected, found),
					// @ts-ignore
					expected,
					// @ts-ignore
					found,
					// @ts-ignore
					location,
				);
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsestart() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				s0 = peg$parsegroup();
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s0 = peg$parseor();
					// @ts-ignore
					if (s0 === peg$FAILED) {
						// @ts-ignore
						s0 = peg$parseand();
						// @ts-ignore
						if (s0 === peg$FAILED) {
							// @ts-ignore
							s0 = peg$parsecomparison();
						}
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsegroup() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5, s6;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				if (input.charCodeAt(peg$currPos) === 40) {
					// @ts-ignore
					s2 = peg$c0;
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s2 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e1);
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = peg$parse_();
					// @ts-ignore
					s4 = peg$parseor();
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						s5 = peg$parse_();
						// @ts-ignore
						if (input.charCodeAt(peg$currPos) === 41) {
							// @ts-ignore
							s6 = peg$c1;
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s6 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e2);
						}
						// @ts-ignore
						if (s6 !== peg$FAILED) {
							// @ts-ignore
							peg$savedPos = s0;
							// @ts-ignore
							s0 = peg$f0(s4);
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s0;
							// @ts-ignore
							s0 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e0);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseor() {
				// @ts-ignore
				var s0, s1, s2, s3, s4;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$parseand();
				// @ts-ignore
				if (s2 === peg$FAILED) {
					// @ts-ignore
					s2 = peg$parsecomparison();
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = [];
					// @ts-ignore
					s4 = peg$parseor_tails();
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						while (s4 !== peg$FAILED) {
							// @ts-ignore
							s3.push(s4);
							// @ts-ignore
							s4 = peg$parseor_tails();
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						s3 = peg$FAILED;
					}
					// @ts-ignore
					if (s3 !== peg$FAILED) {
						// @ts-ignore
						peg$savedPos = s0;
						// @ts-ignore
						s0 = peg$f1(s2, s3);
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e3);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseor_tails() {
				// @ts-ignore
				var s0, s1, s2, s3, s4;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				if (input.substr(peg$currPos, 2) === peg$c2) {
					// @ts-ignore
					s2 = peg$c2;
					// @ts-ignore
					peg$currPos += 2;
					// @ts-ignore
				} else {
					// @ts-ignore
					s2 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e4);
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = peg$parse_();
					// @ts-ignore
					s4 = peg$parseand();
					// @ts-ignore
					if (s4 === peg$FAILED) {
						// @ts-ignore
						s4 = peg$parsecomparison();
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						peg$savedPos = s0;
						// @ts-ignore
						s0 = peg$f2(s4);
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseand() {
				// @ts-ignore
				var s0, s1, s2, s3, s4;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$parsegroup();
				// @ts-ignore
				if (s2 === peg$FAILED) {
					// @ts-ignore
					s2 = peg$parsecomparison();
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = [];
					// @ts-ignore
					s4 = peg$parseand_tails();
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						while (s4 !== peg$FAILED) {
							// @ts-ignore
							s3.push(s4);
							// @ts-ignore
							s4 = peg$parseand_tails();
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						s3 = peg$FAILED;
					}
					// @ts-ignore
					if (s3 !== peg$FAILED) {
						// @ts-ignore
						peg$savedPos = s0;
						// @ts-ignore
						s0 = peg$f3(s2, s3);
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e5);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseand_tails() {
				// @ts-ignore
				var s0, s1, s2, s3, s4;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				if (input.substr(peg$currPos, 2) === peg$c3) {
					// @ts-ignore
					s2 = peg$c3;
					// @ts-ignore
					peg$currPos += 2;
					// @ts-ignore
				} else {
					// @ts-ignore
					s2 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e6);
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = peg$parse_();
					// @ts-ignore
					s4 = peg$parsegroup();
					// @ts-ignore
					if (s4 === peg$FAILED) {
						// @ts-ignore
						s4 = peg$parsecomparison();
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						peg$savedPos = s0;
						// @ts-ignore
						s0 = peg$f4(s4);
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsecomparison() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				s0 = peg$parsever_comparison();
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s0 = peg$parseint_comparison();
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseint_comparison() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5, s6, s7;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$parseterm();
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = peg$parse_();
					// @ts-ignore
					if (input.substr(peg$currPos, 2) === peg$c4) {
						// @ts-ignore
						s4 = peg$c4;
						// @ts-ignore
						peg$currPos += 2;
						// @ts-ignore
					} else {
						// @ts-ignore
						s4 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e8);
					}
					// @ts-ignore
					if (s4 === peg$FAILED) {
						// @ts-ignore
						if (input.charCodeAt(peg$currPos) === 62) {
							// @ts-ignore
							s4 = peg$c5;
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s4 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e9);
						}
						// @ts-ignore
						if (s4 === peg$FAILED) {
							// @ts-ignore
							if (input.substr(peg$currPos, 2) === peg$c6) {
								// @ts-ignore
								s4 = peg$c6;
								// @ts-ignore
								peg$currPos += 2;
								// @ts-ignore
							} else {
								// @ts-ignore
								s4 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) peg$fail(peg$e10);
							}
							// @ts-ignore
							if (s4 === peg$FAILED) {
								// @ts-ignore
								if (input.charCodeAt(peg$currPos) === 60) {
									// @ts-ignore
									s4 = peg$c7;
									// @ts-ignore
									peg$currPos++;
									// @ts-ignore
								} else {
									// @ts-ignore
									s4 = peg$FAILED;
									// @ts-ignore
									if (peg$silentFails === 0) {
										peg$fail(peg$e11);
									}
								}
								// @ts-ignore
								if (s4 === peg$FAILED) {
									// @ts-ignore
									if (
										input.substr(peg$currPos, 3) === peg$c8
									) {
										// @ts-ignore
										s4 = peg$c8;
										// @ts-ignore
										peg$currPos += 3;
										// @ts-ignore
									} else {
										// @ts-ignore
										s4 = peg$FAILED;
										// @ts-ignore
										if (peg$silentFails === 0) {
											peg$fail(peg$e12);
										}
									}
								}
							}
						}
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						s5 = peg$parse_();
						// @ts-ignore
						s6 = peg$parseterm();
						// @ts-ignore
						if (s6 !== peg$FAILED) {
							// @ts-ignore
							s7 = peg$parse_();
							// @ts-ignore
							peg$savedPos = s0;
							// @ts-ignore
							s0 = peg$f5(s2, s4, s6);
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s0;
							// @ts-ignore
							s0 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e7);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsever_comparison() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5, s6, s7;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$parseterm();
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = peg$parse_();
					// @ts-ignore
					if (input.substr(peg$currPos, 2) === peg$c4) {
						// @ts-ignore
						s4 = peg$c4;
						// @ts-ignore
						peg$currPos += 2;
						// @ts-ignore
					} else {
						// @ts-ignore
						s4 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e8);
					}
					// @ts-ignore
					if (s4 === peg$FAILED) {
						// @ts-ignore
						if (input.charCodeAt(peg$currPos) === 62) {
							// @ts-ignore
							s4 = peg$c5;
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s4 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e9);
						}
						// @ts-ignore
						if (s4 === peg$FAILED) {
							// @ts-ignore
							if (input.substr(peg$currPos, 2) === peg$c6) {
								// @ts-ignore
								s4 = peg$c6;
								// @ts-ignore
								peg$currPos += 2;
								// @ts-ignore
							} else {
								// @ts-ignore
								s4 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) peg$fail(peg$e10);
							}
							// @ts-ignore
							if (s4 === peg$FAILED) {
								// @ts-ignore
								if (input.charCodeAt(peg$currPos) === 60) {
									// @ts-ignore
									s4 = peg$c7;
									// @ts-ignore
									peg$currPos++;
									// @ts-ignore
								} else {
									// @ts-ignore
									s4 = peg$FAILED;
									// @ts-ignore
									if (peg$silentFails === 0) {
										peg$fail(peg$e11);
									}
								}
								// @ts-ignore
								if (s4 === peg$FAILED) {
									// @ts-ignore
									if (
										input.substr(peg$currPos, 3) === peg$c8
									) {
										// @ts-ignore
										s4 = peg$c8;
										// @ts-ignore
										peg$currPos += 3;
										// @ts-ignore
									} else {
										// @ts-ignore
										s4 = peg$FAILED;
										// @ts-ignore
										if (peg$silentFails === 0) {
											peg$fail(peg$e12);
										}
									}
								}
							}
						}
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						s5 = peg$parse_();
						// @ts-ignore
						s6 = peg$parseversion();
						// @ts-ignore
						if (s6 !== peg$FAILED) {
							// @ts-ignore
							s7 = peg$parse_();
							// @ts-ignore
							peg$savedPos = s0;
							// @ts-ignore
							s0 = peg$f6(s2, s4, s6);
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s0;
							// @ts-ignore
							s0 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e13);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseterm() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				s0 = peg$parseconst();
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s0 = peg$parsestring();
					// @ts-ignore
					if (s0 === peg$FAILED) {
						// @ts-ignore
						s0 = peg$parsehex();
						// @ts-ignore
						if (s0 === peg$FAILED) {
							// @ts-ignore
							s0 = peg$parseinteger();
						}
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseconst() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$currPos;
				// @ts-ignore
				s3 = peg$currPos;
				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				if (peg$r0.test(input.charAt(peg$currPos))) {
					// @ts-ignore
					s4 = input.charAt(peg$currPos);
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s4 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e15);
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s4 !== peg$FAILED) {
					// @ts-ignore
					peg$currPos = s3;
					// @ts-ignore
					s3 = undefined;
					// @ts-ignore
				} else {
					// @ts-ignore
					s3 = peg$FAILED;
				}
				// @ts-ignore
				if (s3 !== peg$FAILED) {
					// @ts-ignore
					s4 = [];
					// @ts-ignore
					if (peg$r1.test(input.charAt(peg$currPos))) {
						// @ts-ignore
						s5 = input.charAt(peg$currPos);
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s5 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e16);
					}
					// @ts-ignore
					if (s5 !== peg$FAILED) {
						// @ts-ignore
						while (s5 !== peg$FAILED) {
							// @ts-ignore
							s4.push(s5);
							// @ts-ignore
							if (peg$r1.test(input.charAt(peg$currPos))) {
								// @ts-ignore
								s5 = input.charAt(peg$currPos);
								// @ts-ignore
								peg$currPos++;
								// @ts-ignore
							} else {
								// @ts-ignore
								s5 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) peg$fail(peg$e16);
							}
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						s4 = peg$FAILED;
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						s3 = [s3, s4];
						// @ts-ignore
						s2 = s3;
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s2;
						// @ts-ignore
						s2 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s2;
					// @ts-ignore
					s2 = peg$FAILED;
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f7(s2);
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e14);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseinteger() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$currPos;
				// @ts-ignore
				if (input.charCodeAt(peg$currPos) === 45) {
					// @ts-ignore
					s3 = peg$c9;
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s3 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e18);
				}
				// @ts-ignore
				if (s3 === peg$FAILED) {
					// @ts-ignore
					s3 = null;
				}
				// @ts-ignore
				s4 = [];
				// @ts-ignore
				if (peg$r2.test(input.charAt(peg$currPos))) {
					// @ts-ignore
					s5 = input.charAt(peg$currPos);
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s5 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e19);
				}
				// @ts-ignore
				if (s5 !== peg$FAILED) {
					// @ts-ignore
					while (s5 !== peg$FAILED) {
						// @ts-ignore
						s4.push(s5);
						// @ts-ignore
						if (peg$r2.test(input.charAt(peg$currPos))) {
							// @ts-ignore
							s5 = input.charAt(peg$currPos);
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s5 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e19);
						}
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					s4 = peg$FAILED;
				}
				// @ts-ignore
				if (s4 !== peg$FAILED) {
					// @ts-ignore
					s3 = [s3, s4];
					// @ts-ignore
					s2 = s3;
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s2;
					// @ts-ignore
					s2 = peg$FAILED;
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f8();
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e17);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsehex() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$currPos;
				// @ts-ignore
				if (input.substr(peg$currPos, 2) === peg$c10) {
					// @ts-ignore
					s3 = peg$c10;
					// @ts-ignore
					peg$currPos += 2;
					// @ts-ignore
				} else {
					// @ts-ignore
					s3 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e21);
				}
				// @ts-ignore
				if (s3 !== peg$FAILED) {
					// @ts-ignore
					s4 = [];
					// @ts-ignore
					if (peg$r3.test(input.charAt(peg$currPos))) {
						// @ts-ignore
						s5 = input.charAt(peg$currPos);
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s5 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e22);
					}
					// @ts-ignore
					if (s5 !== peg$FAILED) {
						// @ts-ignore
						while (s5 !== peg$FAILED) {
							// @ts-ignore
							s4.push(s5);
							// @ts-ignore
							if (peg$r3.test(input.charAt(peg$currPos))) {
								// @ts-ignore
								s5 = input.charAt(peg$currPos);
								// @ts-ignore
								peg$currPos++;
								// @ts-ignore
							} else {
								// @ts-ignore
								s5 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) peg$fail(peg$e22);
							}
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						s4 = peg$FAILED;
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						s3 = [s3, s4];
						// @ts-ignore
						s2 = s3;
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s2;
						// @ts-ignore
						s2 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s2;
					// @ts-ignore
					s2 = peg$FAILED;
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f9();
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e20);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseversion() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$currPos;
				// @ts-ignore
				s3 = [];
				// @ts-ignore
				if (peg$r2.test(input.charAt(peg$currPos))) {
					// @ts-ignore
					s4 = input.charAt(peg$currPos);
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s4 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e19);
				}
				// @ts-ignore
				if (s4 !== peg$FAILED) {
					// @ts-ignore
					while (s4 !== peg$FAILED) {
						// @ts-ignore
						s3.push(s4);
						// @ts-ignore
						if (peg$r2.test(input.charAt(peg$currPos))) {
							// @ts-ignore
							s4 = input.charAt(peg$currPos);
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s4 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e19);
						}
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					s3 = peg$FAILED;
				}
				// @ts-ignore
				if (s3 !== peg$FAILED) {
					// @ts-ignore
					if (input.charCodeAt(peg$currPos) === 46) {
						// @ts-ignore
						s4 = peg$c11;
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s4 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e24);
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						s5 = [];
						// @ts-ignore
						if (peg$r2.test(input.charAt(peg$currPos))) {
							// @ts-ignore
							s6 = input.charAt(peg$currPos);
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s6 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e19);
						}
						// @ts-ignore
						if (s6 !== peg$FAILED) {
							// @ts-ignore
							while (s6 !== peg$FAILED) {
								// @ts-ignore
								s5.push(s6);
								// @ts-ignore
								if (peg$r2.test(input.charAt(peg$currPos))) {
									// @ts-ignore
									s6 = input.charAt(peg$currPos);
									// @ts-ignore
									peg$currPos++;
									// @ts-ignore
								} else {
									// @ts-ignore
									s6 = peg$FAILED;
									// @ts-ignore
									if (peg$silentFails === 0) {
										peg$fail(peg$e19);
									}
								}
							}
							// @ts-ignore
						} else {
							// @ts-ignore
							s5 = peg$FAILED;
						}
						// @ts-ignore
						if (s5 !== peg$FAILED) {
							// @ts-ignore
							s6 = peg$currPos;
							// @ts-ignore
							if (input.charCodeAt(peg$currPos) === 46) {
								// @ts-ignore
								s7 = peg$c11;
								// @ts-ignore
								peg$currPos++;
								// @ts-ignore
							} else {
								// @ts-ignore
								s7 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) peg$fail(peg$e24);
							}
							// @ts-ignore
							if (s7 !== peg$FAILED) {
								// @ts-ignore
								s8 = [];
								// @ts-ignore
								if (peg$r2.test(input.charAt(peg$currPos))) {
									// @ts-ignore
									s9 = input.charAt(peg$currPos);
									// @ts-ignore
									peg$currPos++;
									// @ts-ignore
								} else {
									// @ts-ignore
									s9 = peg$FAILED;
									// @ts-ignore
									if (peg$silentFails === 0) {
										peg$fail(peg$e19);
									}
								}
								// @ts-ignore
								if (s9 !== peg$FAILED) {
									// @ts-ignore
									while (s9 !== peg$FAILED) {
										// @ts-ignore
										s8.push(s9);
										// @ts-ignore
										if (
											peg$r2.test(
												input.charAt(peg$currPos),
											)
										) {
											// @ts-ignore
											s9 = input.charAt(peg$currPos);
											// @ts-ignore
											peg$currPos++;
											// @ts-ignore
										} else {
											// @ts-ignore
											s9 = peg$FAILED;
											// @ts-ignore
											if (peg$silentFails === 0) {
												peg$fail(peg$e19);
											}
										}
									}
									// @ts-ignore
								} else {
									// @ts-ignore
									s8 = peg$FAILED;
								}
								// @ts-ignore
								if (s8 !== peg$FAILED) {
									// @ts-ignore
									s7 = [s7, s8];
									// @ts-ignore
									s6 = s7;
									// @ts-ignore
								} else {
									// @ts-ignore
									peg$currPos = s6;
									// @ts-ignore
									s6 = peg$FAILED;
								}
								// @ts-ignore
							} else {
								// @ts-ignore
								peg$currPos = s6;
								// @ts-ignore
								s6 = peg$FAILED;
							}
							// @ts-ignore
							if (s6 === peg$FAILED) {
								// @ts-ignore
								s6 = null;
							}
							// @ts-ignore
							s3 = [s3, s4, s5, s6];
							// @ts-ignore
							s2 = s3;
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s2;
							// @ts-ignore
							s2 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s2;
						// @ts-ignore
						s2 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s2;
					// @ts-ignore
					s2 = peg$FAILED;
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f10(s2);
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e23);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsestring() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parse_();
				// @ts-ignore
				s2 = peg$currPos;
				// @ts-ignore
				if (input.charCodeAt(peg$currPos) === 34) {
					// @ts-ignore
					s3 = peg$c12;
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s3 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e26);
				}
				// @ts-ignore
				if (s3 !== peg$FAILED) {
					// @ts-ignore
					s4 = [];
					// @ts-ignore
					if (peg$r4.test(input.charAt(peg$currPos))) {
						// @ts-ignore
						s5 = input.charAt(peg$currPos);
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s5 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e27);
					}
					// @ts-ignore
					while (s5 !== peg$FAILED) {
						// @ts-ignore
						s4.push(s5);
						// @ts-ignore
						if (peg$r4.test(input.charAt(peg$currPos))) {
							// @ts-ignore
							s5 = input.charAt(peg$currPos);
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s5 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e27);
						}
					}
					// @ts-ignore
					if (input.charCodeAt(peg$currPos) === 34) {
						// @ts-ignore
						s5 = peg$c12;
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s5 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e26);
					}
					// @ts-ignore
					if (s5 !== peg$FAILED) {
						// @ts-ignore
						s3 = [s3, s4, s5];
						// @ts-ignore
						s2 = s3;
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s2;
						// @ts-ignore
						s2 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s2;
					// @ts-ignore
					s2 = peg$FAILED;
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f11();
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s0 = peg$currPos;
					// @ts-ignore
					s1 = peg$parse_();
					// @ts-ignore
					s2 = peg$currPos;
					// @ts-ignore
					if (input.charCodeAt(peg$currPos) === 39) {
						// @ts-ignore
						s3 = peg$c13;
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s3 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e28);
					}
					// @ts-ignore
					if (s3 !== peg$FAILED) {
						// @ts-ignore
						s4 = [];
						// @ts-ignore
						if (peg$r5.test(input.charAt(peg$currPos))) {
							// @ts-ignore
							s5 = input.charAt(peg$currPos);
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s5 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e29);
						}
						// @ts-ignore
						while (s5 !== peg$FAILED) {
							// @ts-ignore
							s4.push(s5);
							// @ts-ignore
							if (peg$r5.test(input.charAt(peg$currPos))) {
								// @ts-ignore
								s5 = input.charAt(peg$currPos);
								// @ts-ignore
								peg$currPos++;
								// @ts-ignore
							} else {
								// @ts-ignore
								s5 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) peg$fail(peg$e29);
							}
						}
						// @ts-ignore
						if (input.charCodeAt(peg$currPos) === 39) {
							// @ts-ignore
							s5 = peg$c13;
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s5 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) peg$fail(peg$e28);
						}
						// @ts-ignore
						if (s5 !== peg$FAILED) {
							// @ts-ignore
							s3 = [s3, s4, s5];
							// @ts-ignore
							s2 = s3;
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s2;
							// @ts-ignore
							s2 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s2;
						// @ts-ignore
						s2 = peg$FAILED;
					}
					// @ts-ignore
					if (s2 !== peg$FAILED) {
						// @ts-ignore
						peg$savedPos = s0;
						// @ts-ignore
						s0 = peg$f12();
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e25);
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parse_() {
				// @ts-ignore
				var s0, s1;

				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s0 = [];
				// @ts-ignore
				if (peg$r6.test(input.charAt(peg$currPos))) {
					// @ts-ignore
					s1 = input.charAt(peg$currPos);
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) peg$fail(peg$e31);
				}
				// @ts-ignore
				while (s1 !== peg$FAILED) {
					// @ts-ignore
					s0.push(s1);
					// @ts-ignore
					if (peg$r6.test(input.charAt(peg$currPos))) {
						// @ts-ignore
						s1 = input.charAt(peg$currPos);
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s1 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) peg$fail(peg$e31);
					}
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				s1 = peg$FAILED;
				// @ts-ignore
				if (peg$silentFails === 0) peg$fail(peg$e30);

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			peg$result = peg$startRuleFunction();

			// @ts-ignore
			if (peg$result !== peg$FAILED && peg$currPos === input.length) {
				// @ts-ignore
				return peg$result;
				// @ts-ignore
			} else {
				// @ts-ignore
				if (peg$result !== peg$FAILED && peg$currPos < input.length) {
					// @ts-ignore
					peg$fail(peg$endExpectation());
				}

				// @ts-ignore
				throw peg$buildStructuredError(
					// @ts-ignore
					peg$maxFailExpected,
					// @ts-ignore
					peg$maxFailPos < input.length
						? input.charAt(peg$maxFailPos)
						: null,
					// @ts-ignore
					peg$maxFailPos < input.length
						// @ts-ignore
						? peg$computeLocation(
							peg$maxFailPos,
							peg$maxFailPos + 1,
						)
						// @ts-ignore
						: peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
				);
			}
		}

		// @ts-ignore
		return {
			SyntaxError: peg$SyntaxError,
			parse: peg$parse,
		};
	})();

export interface FilePosition {
	offset: number;
	line: number;
	column: number;
}

export interface FileRange {
	start: FilePosition;
	end: FilePosition;
	source: string;
}

export interface LiteralExpectation {
	type: "literal";
	text: string;
	ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
	type: "class";
	parts: ClassParts;
	inverted: boolean;
	ignoreCase: boolean;
}

export interface AnyExpectation {
	type: "any";
}

export interface EndExpectation {
	type: "end";
}

export interface OtherExpectation {
	type: "other";
	description: string;
}

export type Expectation =
	| LiteralExpectation
	| ClassExpectation
	| AnyExpectation
	| EndExpectation
	| OtherExpectation;

declare class _PeggySyntaxError extends Error {
	public static buildMessage(
		expected: Expectation[],
		found: string | null,
	): string;
	public message: string;
	public expected: Expectation[];
	public found: string | null;
	public location: FileRange;
	public name: string;
	constructor(
		message: string,
		expected: Expectation[],
		found: string | null,
		location: FileRange,
	);
	format(sources: {
		source?: any;
		text: string;
	}[]): string;
}

export interface TraceEvent {
	type: string;
	rule: string;
	result?: any;
	location: FileRange;
}

declare class _DefaultTracer {
	private indentLevel: number;
	public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
	filename?: string;
	startRule?: "start";
	tracer?: any;
	[key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
	input: string,
	options?: Options,
) => Options extends { startRule: infer StartRule }
	? StartRule extends "start" ? Start : Start
	: Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser
	.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = Group | Or | And | Comparison;
export type Group = Or;
export type Or = { or: [And | Comparison, ...OrTails[]] };
export type OrTails = And | Comparison;
export type And = { and: [Group | Comparison, ...AndTails[]] };
export type AndTails = Group | Comparison;
export type Comparison = VerComparison | IntComparison;
export type IntComparison = { [x: string]: [Term, Term] };
export type VerComparison = { [x: string]: [Term, Version] };
export type Term = Const | String_1 | Hex | Integer;
export type Const = { var: string };
export type Integer = number;
export type Hex = number;
export type Version = string;
export type String_1 = string;
export type _ = string[];
