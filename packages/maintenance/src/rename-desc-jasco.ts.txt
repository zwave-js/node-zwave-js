/*
 * Script to convert JSON config files from the old format to the new one.
 * Execute with `yarn ts packages/maintenance/src/convert-json.ts`
 */

import { enumFilesRecursive } from "@zwave-js/shared";
import fs from "fs-extra";
import path from "path";
import { Project, ts } from "ts-morph";

import { formatWithPrettier } from "./prettier";

const renames = [
	{
		old: "Slim Door and Window Sensor",
		new: "Slim Door+Window Sensor",
	},
	{
		old: "Portable Smart Multi-Sensor, Motion+Temp+Light",
		new: "Portable Motion+Temp+Light Sensor",
	},
	{
		old: "Portable Smart Motion Sensor",
		new: "Portable Motion Sensor",
	},
	{
		old: "Portable 4-Scene Controller",
		new: "Portable 4-Scene Controller",
	},
	{
		old: "Portable 4-Button Remote",
		new: "Portable 4-Button Remote",
	},
	{
		old: "Portable 2-Scene Controller",
		new: "Portable 2-Scene Controller",
	},
	{
		old: "Portable 2-Button Remote",
		new: "Portable 2-Button Remote",
	},
	{
		old: "Portable 1-Scene Controller",
		new: "Portable 1-Scene Controller",
	},
	{
		old: "Plug-in Outdoor Smart Switch V2",
		new: "Plug-in Outdoor Switch V2",
	},
	{
		old: "Plug-in Outdoor Smart Switch",
		new: "Plug-in Outdoor Switch",
	},
	{
		old: "Plug-in 2-Outlet Smart Switch, Simultaneous",
		new: "Plug-in 2-Outlet Switch, Simultaneous",
	},
	{
		old: "Plug-in 2-Outlet Smart Switch, 1 Controlled",
		new: "Plug-in 2-Outlet Switch, 1 Controlled",
	},
	{
		old: "Plug-in 2-Outlet Smart Switch With USB",
		new: "Plug-in 2-Outlet Switch With USB",
	},
	{
		old: "Plug-in 2-Outlet Smart Dimmer, Simultaneous",
		new: "Plug-in 2-Outlet Dimmer, Simultaneous",
	},
	{
		old: "Plug-in 2-Outlet Smart Dimmer, 1 Controlled",
		new: "Plug-in 2-Outlet Dimmer, 1 Controlled",
	},
	{
		old: "Plug-in 2-Outlet Smart Dimmer With USB",
		new: "Plug-in 2-Outlet Dimmer With USB",
	},
	{
		old: "Plug-in 1-Outlet Smart Switch, Energy Monitoring",
		new: "Plug-in 1-Outlet Switch With Energy",
	},
	{
		old: "Plug-in 1-Outlet Smart Switch",
		new: "Plug-in 1-Outlet Switch",
	},
	{
		old: "Plug-in 1-Outlet Smart Dimmer, Energy Monitoring",
		new: "Plug-in 1-Outlet Dimmer With Energy",
	},
	{
		old: "Plug-in 1-Outlet Smart Dimmer",
		new: "Plug-in 1-Outlet Dimmer",
	},
	{
		old: "On-Wall Keypad Secondary Controller",
		new: "On-Wall Keypad Secondary Controller",
	},
	{
		old: "LED A19 Smart Bulb",
		new: "LED A19 Bulb",
	},
	{
		old: "In-Wall Smart Toggle Switch, Quick-fit Simple Wire",
		new: "In-Wall Toggle Switch, QFSW",
	},
	{
		old: "In-Wall Smart Toggle Switch, Lt Almd, Quick-fit Simple Wire",
		new: "In-Wall Toggle Switch, Lt Almd, QFSW",
	},
	{
		old: "In-Wall Smart Toggle Switch, Lt Almd",
		new: "In-Wall Toggle Switch, Lt Almd",
	},
	{
		old: "In-Wall Smart Toggle Switch, 120+277, Quick-fit Simple Wire",
		new: "In-Wall Toggle Switch, 120+277, QFSW",
	},
	{
		old: "In-Wall Smart Toggle Switch, 120+277",
		new: "In-Wall Toggle Switch, 120+277",
	},
	{
		old: "In-Wall Smart Toggle Switch",
		new: "In-Wall Toggle Switch",
	},
	{
		old: "In-Wall Smart Toggle Dimmer, Quick-fit Simple Wire",
		new: "In-Wall Toggle Dimmer, QFSW",
	},
	{
		old: "In-Wall Smart Toggle Dimmer, No Ntrl, Lt Almd",
		new: "In-Wall Toggle Dimmer, No Ntrl, Lt Almd",
	},
	{
		old: "In-Wall Smart Toggle Dimmer, No Ntrl",
		new: "In-Wall Toggle Dimmer, No Ntrl",
	},
	{
		old: "In-Wall Smart Toggle Dimmer, Lt Almd",
		new: "In-Wall Toggle Dimmer, Lt Almd",
	},
	{
		old: "In-Wall Smart Toggle Dimmer, 120+277",
		new: "In-Wall Toggle Dimmer, 120+277",
	},
	{
		old: "In-Wall Smart Toggle Dimmer",
		new: "In-Wall Toggle Dimmer",
	},
	{
		old: "In-Wall Smart Paddle Switch, Quick-fit Simple Wire",
		new: "In-Wall Paddle Switch, QFSW",
	},
	{
		old: "In-Wall Smart Paddle Switch, 120+277, Quick-fit Simple Wire",
		new: "In-Wall Paddle Switch, 120+277, QFSW",
	},
	{
		old: "In-Wall Smart Paddle Switch, 120+277",
		new: "In-Wall Paddle Switch, 120+277",
	},
	{
		old: "In-Wall Smart Paddle Switch",
		new: "In-Wall Paddle Switch",
	},
	{
		old: "In-Wall Smart Paddle Dimmer, Quick-fit Simple Wire",
		new: "In-Wall Paddle Dimmer, QFSW",
	},
	{
		old: "In-Wall Smart Paddle Dimmer, No Ntrl",
		new: "In-Wall Paddle Dimmer, No Ntrl",
	},
	{
		old: "In-Wall Smart Paddle Dimmer, 120+277",
		new: "In-Wall Paddle Dimmer, 120+277",
	},
	{
		old: "In-Wall Smart Paddle Dimmer",
		new: "In-Wall Paddle Dimmer",
	},
	{
		old: "In-Wall Smart Outlet, Tamper Resistant, Lt Almd",
		new: "In-Wall Outlet, TR, Lt Almd",
	},
	{
		old: "In-Wall Smart Outlet, Tamper Resistant",
		new: "In-Wall Outlet, TR",
	},
	{
		old: "In-Wall Smart Outlet",
		new: "In-Wall Outlet",
	},
	{
		old: "In-Wall Smart Motion Switch",
		new: "In-Wall Motion Switch",
	},
	{
		old: "In-Wall Smart Motion Dimmer",
		new: "In-Wall Motion Dimmer",
	},
	{
		old: "In-Wall Smart Fan Speed Control",
		new: "In-Wall Fan Speed Control",
	},
	{
		old: "In-Wall Capacitive Touch Smart Dimmer",
		new: "In-Wall Capacitive Touch Dimmer",
	},
	{
		old: "In-Wall 1000W Smart Toggle Dimmer",
		new: "In-Wall 1000W Toggle Dimmer",
	},
	{
		old: "In-Wall 1000W Smart Paddle Dimmer",
		new: "In-Wall 1000W Paddle Dimmer",
	},
	{
		old: "Hinge Pin Door Sensor",
		new: "Hinge Pin Door Sensor",
	},
	{
		old: "Handheld LCD Remote Controller",
		new: "Handheld LCD Remote Controller",
	},
	{
		old: "Flood+Freeze Sensor",
		new: "Flood+Freeze Sensor",
	},
	{
		old: "Direct Wire 40A Outdoor Smart Switch",
		new: "Direct Wire 40A Outdoor Switch",
	},
];

async function main() {
	const project = new Project();

	const devicesDir = path.join(__dirname, "../../config/config/devices");

	const configFiles = await enumFilesRecursive(
		devicesDir,
		(file) =>
			file.endsWith(".json") &&
			!file.endsWith("index.json") &&
			!file.includes("/templates/") &&
			!file.includes("\\templates\\") &&
			(file.includes("0x0039") || file.includes("0x0063")),
	);

	for (const filename of configFiles) {
		const content = await fs.readFile(filename, "utf8");
		const sourceFile = project.createSourceFile(filename, content, {
			overwrite: true,
			scriptKind: ts.ScriptKind.JSON,
		});

		const root = sourceFile
			.getChildrenOfKind(ts.SyntaxKind.SyntaxList)[0]
			.getChildrenOfKind(ts.SyntaxKind.ExpressionStatement)[0]
			.getChildrenOfKind(ts.SyntaxKind.ObjectLiteralExpression)[0];

		let didChange = false;
		root.transform((traversal) => {
			const node = traversal.currentNode;

			// Only look for the paramInformation property
			if (node === root.compilerNode) return traversal.visitChildren();
			if (!ts.isPropertyAssignment(node)) return node;
			// Make sure we're looking at a simple string property
			if (!ts.isStringLiteral(node.initializer)) return node;

			switch (node.name.getText()) {
				case `"description"`: {
					const current = node.initializer.getText().slice(1, -1);
					const replacement = renames.find(({ old }) =>
						current.includes(old),
					);
					if (!replacement) return node;

					didChange = true;
					return ts.factory.updatePropertyAssignment(
						node,
						node.name,
						ts.factory.createStringLiteral(
							current.replace(replacement.old, replacement.new),
							false,
						),
					);
				}
			}

			return node;
		});

		if (didChange) {
			let output = sourceFile.getFullText();
			output = formatWithPrettier(filename, output);
			await fs.writeFile(filename, output, "utf8");
		}
	}
}

if (require.main === module) {
	void main();
}
