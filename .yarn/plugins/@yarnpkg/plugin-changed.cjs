/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-changed",
factory: function (require) {
"use strict";var plugin=(()=>{var b=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var i=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(o,e)=>(typeof require<"u"?require:o)[e]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var N=(t,o)=>{for(var e in o)b(t,e,{get:o[e],enumerable:!0})},O=(t,o,e,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of I(o))!U.call(t,s)&&s!==e&&b(t,s,{get:()=>o[s],enumerable:!(r=R(o,s))||r.enumerable});return t};var q=t=>O(b({},"__esModule",{value:!0}),t);var J={};N(J,{default:()=>E});var B=i("@yarnpkg/cli"),g=i("clipanion"),w=i("@yarnpkg/core");var P=i("@yarnpkg/core");var v=i("@yarnpkg/core");function W(t){let{project:o}=t,e=new Set;function r({manifest:s}){for(let c of v.Manifest.hardDependencies)for(let l of s.getForScope(c).values()){let n=o.tryWorkspaceByDescriptor(l);n&&!e.has(n)&&(e.add(n),r(n))}}return r(t),[...e]}function y(t){let o=new Set;for(let e of t.project.workspaces)W(e).some(s=>P.structUtils.areLocatorsEqual(s.anchoredLocator,t.anchoredLocator))&&o.add(e);return[...o]}function j(t,o){let e=new Set;for(let r of t.workspaces)if(o.some(c=>c.startsWith(r.relativeCwd))&&!e.has(r)){e.add(r);for(let c of y(r))e.add(c)}return[...e]}var m=class extends B.BaseCommand{constructor(){super(...arguments);this.gitRange=g.Option.String("--git-range");this.cached=g.Option.Boolean("--cached",!1);this.include=g.Option.Array("--include");this.exclude=g.Option.Array("--exclude")}async listWorkspaces(e){let{stdout:r}=await w.execUtils.execvp("git",["diff","--name-only",...this.cached?["--cached"]:[],...this.gitRange?[this.gitRange]:[]],{cwd:e.cwd,strict:!0}),s=r.split(/\r?\n/),c=j(e,s),l=this.include||[],n=this.exclude||[];return c.filter(h=>{let x=w.structUtils.stringifyIdent(h.anchoredLocator);return!(x&&(l.length&&!l.includes(x)||n.length&&n.includes(x)))})}};var k=i("clipanion"),d=i("@yarnpkg/core"),S=i("@yarnpkg/cli"),f=class extends m{constructor(){super(...arguments);this.json=k.Option.Boolean("--json",!1)}async execute(){let e=await d.Configuration.find(this.context.cwd,this.context.plugins),{project:r,workspace:s}=await d.Project.find(e,this.context.cwd);if(!s)throw new S.WorkspaceRequiredError(r.cwd,this.context.cwd);return(await d.StreamReport.start({configuration:e,json:this.json,stdout:this.context.stdout},async l=>{let n=await this.listWorkspaces(r);for(let h of n)l.reportInfo(null,h.relativeCwd),l.reportJson({name:h.manifest.name?d.structUtils.stringifyIdent(h.manifest.name):null,location:h.relativeCwd})})).exitCode()}};f.usage=k.Command.Usage({description:"List changed workspaces and their dependents",details:"\n      If the `--json` flag is set the output will follow a JSON-stream output also known as NDJSON (https://github.com/ndjson/ndjson-spec).\n    ",examples:[["Find changed files within a Git range","yarn changed list --git-range 93a9ed8..4ef2c61"],["Include or exclude workspaces","yarn changed list --include @foo/a --exclude @foo/b"]]}),f.paths=[["changed","list"]];var a=i("clipanion"),p=i("@yarnpkg/core"),D=i("@yarnpkg/cli"),u=class extends m{constructor(){super(...arguments);this.commandName=a.Option.String();this.args=a.Option.Proxy();this.verbose=a.Option.Boolean("-v,--verbose",!1);this.parallel=a.Option.Boolean("-p,--parallel",!1);this.interlaced=a.Option.Boolean("-i,--interlaced",!1);this.topological=a.Option.Boolean("-t,--topological",!1);this.all=a.Option.Boolean("-A,--all",!1);this.recursive=a.Option.Boolean("-R,--recursive",!1);this.worktree=a.Option.Boolean("-W,--worktree",!1);this.jobs=a.Option.String("-j,--jobs")}async execute(){let e=await p.Configuration.find(this.context.cwd,this.context.plugins),{project:r,workspace:s}=await p.Project.find(e,this.context.cwd);if(!s)throw new D.WorkspaceRequiredError(r.cwd,this.context.cwd);let c=await this.listWorkspaces(r);return c.length?this.cli.run(["workspaces","foreach",...c.reduce((l,n)=>[...l,"--include",p.structUtils.stringifyIdent(n.anchoredLocator)],[]),...this.verbose?["--verbose"]:[],...this.parallel?["--parallel"]:[],...this.interlaced?["--interlaced"]:[],...this.topological?["--topological"]:[],...this.all?["--all"]:[],...this.recursive?["--recursive"]:[],...this.worktree?["--worktree"]:[],...this.jobs?["--jobs",`${this.jobs}`]:[],this.commandName,...this.args],{cwd:r.cwd}):(await p.StreamReport.start({configuration:e,stdout:this.context.stdout},async n=>{n.reportInfo(null,"No workspaces changed")})).exitCode()}};u.usage=a.Command.Usage({description:"Run a command on changed workspaces and their dependents",details:`
      This command will run a given sub-command on changed workspaces and workspaces depends on them.

      Check the documentation for \`yarn workspace foreach\` for more details.
    `,examples:[["Run build scripts on changed workspaces","yarn changed foreach run build"],["Find changed files within a Git range","yarn changed foreach --git-range 93a9ed8..4ef2c61 run build"]]}),u.paths=[["changed","foreach"]];var A={commands:[f,u]},E=A;return q(J);})();
return plugin;
}
};
